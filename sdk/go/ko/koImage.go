// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ko

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KoImage struct {
	pulumi.CustomResourceState

	// base image to use
	BaseImage pulumi.StringPtrOutput `pulumi:"baseImage"`
	// built image reference by digest
	ImageRef pulumi.StringOutput `pulumi:"imageRef"`
	// import path to build
	Importpath pulumi.StringOutput `pulumi:"importpath"`
	// platforms to build
	Platforms pulumi.StringPtrOutput `pulumi:"platforms"`
	// working directory for the build
	WorkingDir pulumi.StringPtrOutput `pulumi:"workingDir"`
}

// NewKoImage registers a new resource with the given unique name, arguments, and options.
func NewKoImage(ctx *pulumi.Context,
	name string, args *KoImageArgs, opts ...pulumi.ResourceOption) (*KoImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Importpath == nil {
		return nil, errors.New("invalid value for required argument 'Importpath'")
	}
	var resource KoImage
	err := ctx.RegisterResource("ko:index/koImage:KoImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKoImage gets an existing KoImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKoImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KoImageState, opts ...pulumi.ResourceOption) (*KoImage, error) {
	var resource KoImage
	err := ctx.ReadResource("ko:index/koImage:KoImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KoImage resources.
type koImageState struct {
	// base image to use
	BaseImage *string `pulumi:"baseImage"`
	// built image reference by digest
	ImageRef *string `pulumi:"imageRef"`
	// import path to build
	Importpath *string `pulumi:"importpath"`
	// platforms to build
	Platforms *string `pulumi:"platforms"`
	// working directory for the build
	WorkingDir *string `pulumi:"workingDir"`
}

type KoImageState struct {
	// base image to use
	BaseImage pulumi.StringPtrInput
	// built image reference by digest
	ImageRef pulumi.StringPtrInput
	// import path to build
	Importpath pulumi.StringPtrInput
	// platforms to build
	Platforms pulumi.StringPtrInput
	// working directory for the build
	WorkingDir pulumi.StringPtrInput
}

func (KoImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*koImageState)(nil)).Elem()
}

type koImageArgs struct {
	// base image to use
	BaseImage *string `pulumi:"baseImage"`
	// import path to build
	Importpath string `pulumi:"importpath"`
	// platforms to build
	Platforms *string `pulumi:"platforms"`
	// working directory for the build
	WorkingDir *string `pulumi:"workingDir"`
}

// The set of arguments for constructing a KoImage resource.
type KoImageArgs struct {
	// base image to use
	BaseImage pulumi.StringPtrInput
	// import path to build
	Importpath pulumi.StringInput
	// platforms to build
	Platforms pulumi.StringPtrInput
	// working directory for the build
	WorkingDir pulumi.StringPtrInput
}

func (KoImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*koImageArgs)(nil)).Elem()
}

type KoImageInput interface {
	pulumi.Input

	ToKoImageOutput() KoImageOutput
	ToKoImageOutputWithContext(ctx context.Context) KoImageOutput
}

func (*KoImage) ElementType() reflect.Type {
	return reflect.TypeOf((**KoImage)(nil)).Elem()
}

func (i *KoImage) ToKoImageOutput() KoImageOutput {
	return i.ToKoImageOutputWithContext(context.Background())
}

func (i *KoImage) ToKoImageOutputWithContext(ctx context.Context) KoImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KoImageOutput)
}

// KoImageArrayInput is an input type that accepts KoImageArray and KoImageArrayOutput values.
// You can construct a concrete instance of `KoImageArrayInput` via:
//
//          KoImageArray{ KoImageArgs{...} }
type KoImageArrayInput interface {
	pulumi.Input

	ToKoImageArrayOutput() KoImageArrayOutput
	ToKoImageArrayOutputWithContext(context.Context) KoImageArrayOutput
}

type KoImageArray []KoImageInput

func (KoImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KoImage)(nil)).Elem()
}

func (i KoImageArray) ToKoImageArrayOutput() KoImageArrayOutput {
	return i.ToKoImageArrayOutputWithContext(context.Background())
}

func (i KoImageArray) ToKoImageArrayOutputWithContext(ctx context.Context) KoImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KoImageArrayOutput)
}

// KoImageMapInput is an input type that accepts KoImageMap and KoImageMapOutput values.
// You can construct a concrete instance of `KoImageMapInput` via:
//
//          KoImageMap{ "key": KoImageArgs{...} }
type KoImageMapInput interface {
	pulumi.Input

	ToKoImageMapOutput() KoImageMapOutput
	ToKoImageMapOutputWithContext(context.Context) KoImageMapOutput
}

type KoImageMap map[string]KoImageInput

func (KoImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KoImage)(nil)).Elem()
}

func (i KoImageMap) ToKoImageMapOutput() KoImageMapOutput {
	return i.ToKoImageMapOutputWithContext(context.Background())
}

func (i KoImageMap) ToKoImageMapOutputWithContext(ctx context.Context) KoImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KoImageMapOutput)
}

type KoImageOutput struct{ *pulumi.OutputState }

func (KoImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KoImage)(nil)).Elem()
}

func (o KoImageOutput) ToKoImageOutput() KoImageOutput {
	return o
}

func (o KoImageOutput) ToKoImageOutputWithContext(ctx context.Context) KoImageOutput {
	return o
}

// base image to use
func (o KoImageOutput) BaseImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KoImage) pulumi.StringPtrOutput { return v.BaseImage }).(pulumi.StringPtrOutput)
}

// built image reference by digest
func (o KoImageOutput) ImageRef() pulumi.StringOutput {
	return o.ApplyT(func(v *KoImage) pulumi.StringOutput { return v.ImageRef }).(pulumi.StringOutput)
}

// import path to build
func (o KoImageOutput) Importpath() pulumi.StringOutput {
	return o.ApplyT(func(v *KoImage) pulumi.StringOutput { return v.Importpath }).(pulumi.StringOutput)
}

// platforms to build
func (o KoImageOutput) Platforms() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KoImage) pulumi.StringPtrOutput { return v.Platforms }).(pulumi.StringPtrOutput)
}

// working directory for the build
func (o KoImageOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KoImage) pulumi.StringPtrOutput { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type KoImageArrayOutput struct{ *pulumi.OutputState }

func (KoImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KoImage)(nil)).Elem()
}

func (o KoImageArrayOutput) ToKoImageArrayOutput() KoImageArrayOutput {
	return o
}

func (o KoImageArrayOutput) ToKoImageArrayOutputWithContext(ctx context.Context) KoImageArrayOutput {
	return o
}

func (o KoImageArrayOutput) Index(i pulumi.IntInput) KoImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KoImage {
		return vs[0].([]*KoImage)[vs[1].(int)]
	}).(KoImageOutput)
}

type KoImageMapOutput struct{ *pulumi.OutputState }

func (KoImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KoImage)(nil)).Elem()
}

func (o KoImageMapOutput) ToKoImageMapOutput() KoImageMapOutput {
	return o
}

func (o KoImageMapOutput) ToKoImageMapOutputWithContext(ctx context.Context) KoImageMapOutput {
	return o
}

func (o KoImageMapOutput) MapIndex(k pulumi.StringInput) KoImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KoImage {
		return vs[0].(map[string]*KoImage)[vs[1].(string)]
	}).(KoImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KoImageInput)(nil)).Elem(), &KoImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*KoImageArrayInput)(nil)).Elem(), KoImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KoImageMapInput)(nil)).Elem(), KoImageMap{})
	pulumi.RegisterOutputType(KoImageOutput{})
	pulumi.RegisterOutputType(KoImageArrayOutput{})
	pulumi.RegisterOutputType(KoImageMapOutput{})
}
